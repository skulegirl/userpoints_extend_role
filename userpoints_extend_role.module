<?php

// Copyright 2014 Anna Maste

define('MAX_DATE', 2147483647);

/**
 * Implement hook_userpoints
 */
function userpoints_extend_role_menu()
{
  $items['admin/config/people/userpoints-extend-role'] = array(
    'title' => t('!Points Extend Role Rules', userpoints_translation()),
    'description' => 'Set up rules for extensions of roles when userpoints are awarded',
    'page callback' => 'userpoints_extend_role_overview',
    'access arguments' => array('administer users'),
    'file' => 'userpoints_extend_role.admin.inc',
    'weight' => 10,
  );
  $items['admin/config/people/userpoints-extend-role/add'] = array(
    'title' => t('Add !Points Extend Role Rule', userpoints_translation()),
    'description' => 'Add a rule for extension of roles when userpoints are awarded',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpoints_extend_role_edit_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
    'file' => 'userpoints_extend_role.admin.inc',
  );
  $items['admin/config/people/userpoints-extend-role/edit/%userpoints_extend_role_rule'] = array(
    'title' => t('Edit !Points Extend Role Rule', userpoints_translation()),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpoints_extend_role_edit_form', 5),
    'access arguments' => array('administer users'),
    'file' => 'userpoints_extend_role.admin.inc',
  );
  $items['admin/config/people/userpoints-extend-role/delete/%userpoints_extend_role_rule'] = array(
    'title' => t('Delete !Points Extend Role Rule', userpoints_translation()),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpoints_extend_role_delete_form', 5),
    'access arguments' => array('administer users'),
    'file' => 'userpoints_extend_role.admin.inc',
  );

  return $items;
}

function userpoints_extend_role_userpoints($op, $params = array()) {
  if ($op ==  'points after') {
    if (isset($params['moderate']) && $params['moderate']==1)
    {
      // don't run if we still need to moderate the points - we'll be 
      // called again once they're been approved
      return;
    }
    _userpoints_extend_role($params['uid'], $params['points'], $params['txn_id'], $params['tid']);
  }
}

/***
 * Implement hook_uc_roles_grant
 * For new users, the userpoints hook above will run before they have had their expiring roles granted, so it 
 * will not succesfully update them. Call the extend_role function again here if the user was newly granted a role.
 */

function userpoints_extend_role_uc_roles_grant($account, $rid, $timestamp)
{
  // Only do this if the account is brand new!
  if ($account->access <= 0)
  {
    _userpoints_extend_role($account->uid, 0, 0, 0, TRUE);
  }
}

function _userpoints_extend_role($uid, $points, $txn_id, $tid, $new_account = FALSE)
{
  if ($points < 0)
  {
    // do nothing for negative points
    return;
  }

  $result = db_select('userpoints_extend_role_rules', 'r')
    ->fields('r', array('rid', 'categorytid', 'multiple_threshold', 'roles', 'extend_amount'))
    ->orderBy('weight')
    ->execute()
    ->fetchAll();

  foreach ($result as $rule)
  {
    $rule->roles = array_map('check_plain', unserialize($rule->roles));
    if ($new_account)
    {
      // any points currently assigned can all be assumed to have been just 
      // allocated. Do this for all tids and rules
      $points = userpoints_get_current_points($uid, $rule->categorytid);
    }
    else 
    {
      // check if the tid passed in matches this rule
      if ($rule->categorytid != $tid)
      {
        // if not, skip it.
        continue;
      }
    }
    $new_total_points = userpoints_get_current_points($uid, $rule->categorytid);
    if ($new_total_points <= 0)
    {
      // no points, nothing to do
      return;
    } 
    if ($rule->multiple_threshold == 0)
    {
      // no threshold set, nothing to do
      return;
    }

    if (empty($rule->roles))
    {
      // no roles set, nothing to do
      return;
    }

    if ($rule->extend_amount == 0)
    {
      // no extension amount set, nothing to do
      return;
    }

    $old_total_points = $new_total_points - $points;

    // Number of thresholds passed is calculated with old points that were 
    // above last threshold, plus the new points
    $num_thresh_passed = 
      floor((($old_total_points % $rule->multiple_threshold) + $points) / 
        $rule->multiple_threshold); 
    if ($num_thresh_passed > 0)
    {
      foreach ($rule->roles as $rid => $rolename)
      {
        if ($expiry = db_query_range('select expiration from {uc_roles_expirations} where uid = :uid AND rid = :rid', 0, 1, array(
            ':uid' => $uid,
            ':rid' => $rid,
          ))->fetchField())
        {
          // then there wan an expiry date for this role and user. Increment it.
          $expiry_incr_string = '+' . $num_thresh_passed * $rule->extend_amount . 'months';
          $new_expiry = strtotime($expiry_incr_string, $expiry);

          if ($new_expiry < 0 || $new_expiry > MAX_DATE) // 2038 problem!
          {
            watchdog('up_extend_role',
            'Could not extend !role role for user !user, overflow error (oldexpiry was !oldexpiry, attempted to add !incr_string).',
            array('!role' => $rolename, 
              '!user' => $uid, 
              '!oldexpiry' => format_date($expiry),
              '!incr_string' => $expiry_incr_string,
            ), WATCHDOG_WARNING);
            return;
          }

          if(db_query("UPDATE {uc_roles_expirations} SET expiration = :expiration, notified = NULL WHERE uid = :uid AND rid = :rid", 
            array(
              ':expiration' => $new_expiry, 
              ':uid' => $uid, 
              ':rid' =>$rid
            )))
          {
            // success - note in log and add db row
            watchdog('up_extend_role', 'Role !role for user !user has had expiry date extended from !oldexpiry to !newexpiry',
              array('!role' => $rolename, '!user' => $uid, '!oldexpiry' => format_date($expiry), 
                '!newexpiry' => format_date($new_expiry)), WATCHDOG_INFO);

            db_query("INSERT INTO {userpoints_extend_role} (uid, rid, txn_id, timestamp, old_expiry, extension_string, new_expiry) VALUES (:uid, :rid, :txn_id, :timestamp, :expiry, :expiry_incr_string, :new_expiry)",
            array(
              ':uid' => $uid, 
              ':rid' => $rid, 
              ':txn_id' => $txn_id, 
              ':timestamp' => time(), 
              ':expiry' => $expiry, 
              ':expiry_incr_string' => $expiry_incr_string, 
              ':new_expiry' => $new_expiry
            ));
          }
          module_invoke_all('userpoints_role_extended', $uid, $rid, $txn_id, $expiry, $new_expiry, $rule->categorytid);
        }
      }
    }
  }
}

/**
 * Implements hook_theme
 */
function userpoints_extend_role_theme() {
  return array(
    'userpoints_extend_role_categorytid' => array(
      'variables' => array('categorytid' => NULL),
      'file' => 'userpoints_extend_role.admin.inc',
    ),
    'userpoints_extend_role_multiple_threshold' => array(
      'variables' => array('multiple_threshold' => NULL),
      'file' => 'userpoints_extend_role.admin.inc',
    ),
    'userpoints_extend_role_roles' => array(
      'variables' => array('items' => NULL),
      'file' => 'userpoints_extend_role.admin.inc',
    ),
    'userpoints_extend_role_extend_amount' => array(
      'variables' => array('extend_amount' => NULL),
      'file' => 'userpoints_extend_role.admin.inc',
    ),
  );
}

/** 
 * Load a userpoints extend role rule.
 */
function userpoints_extend_role_rule_load($rid) {
  $result = db_select('userpoints_extend_role_rules', 'r')
    ->fields('r')
    ->condition('rid', $rid)
    ->execute()
    ->fetchAssoc();
  $result['roles'] = unserialize($result['roles']);
  if (empty($result['roles'])) {
    $result['roles'] = array();
  }
  return $result;
}
